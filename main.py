# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
# V1.6.3 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Ç–µ–ø–µ—Ä—å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å—ë —Å—Ç–∞–±–∏–ª—å–Ω–æ  –∏ –ø–æ–∫–∞–∑. –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
from telebot import *
import os
import time
import check_info_xar
import pyautogui
import keyboard
import psutil
from PIL import Image, ImageDraw, ImageFont
import datetime
import wikipedia







# –°–æ–∑–¥–∞–Ω–∏–µ –Ω—É–∂–Ω—ã–π –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
try:
    os.mkdir("C:/Users/Public/Documents/DownloadBot")
    os.mkdir("autocreensave")
except:
    pass








# –ó–∞–ø—É—Å–∫ –Ω—É–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ö.
def  pros():
    s = []
    processes = psutil.process_iter()
    for process in processes:
        if  process.name() != 'svchost.exe' and process.name() != 'System Idle Process' and process.name() != 'System' and process.name() != 'Registry':
            s.append(process.name())
    return s




def check_status_on_off(spisok):
    stats = open('autoscreenstatus.txt', 'r+')
    stats_on = str(stats.read())


    if  stats_on=='off':
        os.system("taskkill /f /im  autoscreen.exe")


    elif stats_on=='on' and  'autoscreen.exe' not in spisok:
        # –ë—É–¥–µ—Ç –∑–∞–ø—É—Å–∫, —Ñ–∞–π–ª autoscreen.exe
        os.startfile('autoscreen.exe')
        time.sleep(4)
        os.system("taskkill /f /im  main.exe")




    stats.close()


check_status_on_off(pros())




def check_main_pr(process):
    if  'writing_time_screen.exe' in process:
        print('1')
    else:
        os.startfile('writing_time_screen.exe')

    if  'update.exe' in process:
        pass


    else:
        os.startfile('update.exe')

check_main_pr(pros())


ff = open('token_status.txt','r')
ff = int(ff.read())

if ff==0:
    os.startfile('apps.exe')
else:
    pass






# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–ø–µ–Ω–Ω—É—é
f = open('token.txt','r')
token = f.read()
bot = telebot.TeleBot(token)
f.close()


@bot.message_handler(commands=['—Å—Ç–∞—Ä—Ç'] or ['start'])
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤ –±–æ—Ç–µ
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞.')
    item2 = types.KeyboardButton('–ú—ã—à—å.')
    item3 = types.KeyboardButton('–≠–∫—Ä–∞–Ω.')
    item4 = types.KeyboardButton('–ö–æ–º–ø—å—é—Ç–µ—Ä.')
    item6 = types.KeyboardButton('–§–∞–π–ª—ã.')
    item7 = types.KeyboardButton('–°–∞–π—Ç—ã.')
    item8 = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.')
    item9 = types.KeyboardButton('–î—Ä—É–≥–æ–µ.')
    item10 = types.KeyboardButton('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.')
    item11 = types.KeyboardButton('–û—Ç–∫—Ä–æ–π –º–Ω–µ Arizona')
    item12 = types.KeyboardButton('–ö—É—Ä—Å –†—É–±–ª—è‚ÇΩ.')
    item13 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–æ—Ç–∞ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.')
    item5 = types.KeyboardButton('–ù–∏—á–µ–≥–æ, –Ω–µ –Ω—É–∂–Ω–æ.')
    markup.add(item1, item2, item3, item4, item6, item7, item8,item9)
    bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {0.first_name}!\nüíªüíª –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–∂–µ–¥–∞–π!\n–ñ–¥—É —Ç–µ–±—è –Ω–∞ —Å–≤–µ—Ç–ª–æ–π —Å—Ç–æ—Ä–æ–Ω–µ!'.format(message.from_user), reply_markup=markup)
    timing = datetime.datetime.now()
    new = open('processlog.txt', 'a')
    new.write(str(timing) + ' –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.')

@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    if call.data == '–í—ã–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.':
        timing = datetime.datetime.now()
        bot.send_message(call.message.chat.id, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞.')
        os.startfile(r'block_keyboard.exe')
        off_klav = open('processlog.txt','a')
        off_klav.write(str(timing)+' –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, user_id }.\n')
        off_klav.close()




    elif call.data == '–í–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.':
        timing = datetime.datetime.now()
        os.system("taskkill /f /im  block_keyboard.exe")
        bot.send_message(call.message.chat.id, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞.')
        on_klav = open('processlog.txt','a')
        on_klav.write(str(timing)+' –í–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.\n')
        on_klav.close()






    elif call.data == '–í–∫–ª—é—á–∏—Ç—å –º—ã—à—å.':
        timing = datetime.datetime.now()
        bot.send_message(call.message.chat.id, '–ú—ã—à—å –≤–∫–ª—é—á–µ–Ω–∞.')
        os.system("taskkill /f /im  block_mouse.exe")
        on_mouse = open('processlog.txt','a')
        on_mouse.write(str(timing)+' –í–∫–ª—é—á–µ–Ω–∏–µ –º—ã—à–∏.\n')
        on_mouse.close()




    elif call.data == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.':

        stop_dan = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞:')

        def crash_pr(name_pr):
            timing = datetime.datetime.now()
            if name_pr.text == 'main.exe' or name_pr.text == 'writing_time_screen.exe' or name_pr.text == 'update.exe':
                bot.send_message(call.message.chat.id, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.')
                warning = open('processlog.txt', 'a')
                warning.write(str(timing) + f' –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º: {name_pr.text}\n')
                warning.close()

            elif name_pr.text == '–¢–µ—Ö. –†–∞–±–æ—Ç—ã.':
                os.system(f"taskkill /f /im update.exe")
                os.system(f"taskkill /f /im main.exe")
                bot.send_message(call.message.chat.id, '*–í—ã–ø–æ–ª–Ω–µ–Ω–æ.*')


            elif name_pr.text != 'main.exe':
                os.system(f"taskkill /f /im {name_pr.text}")
                bot.send_message(call.message.chat.id,     '–í—ã–ø–æ–ª–Ω–µ–Ω–æ. –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ —Ç–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞.')

                crash_process = open('processlog.txt','a')
                crash_process.write(str(timing)+f' –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {name_pr.text}\n')
                crash_process.close()
        bot.register_next_step_handler(stop_dan, crash_pr)




    elif call.data == '–í—ã–∫–ª—é—á–∏—Ç—å –º—ã—à—å.':
        timing = datetime.datetime.now()
        bot.send_message(call.message.chat.id, '–ú—ã—à—å –≤—ã–∫–ª—é—á–µ–Ω–∞.')
        os.startfile('block_mouse.exe')
        off_mouse = open('processlog.txt','a')
        off_mouse.write(str(timing)+' –í—ã–∫–ª—é—á–µ–Ω–∏–µ –º—ã—à–∏.\n')
        off_mouse.close()



    elif call.data == '–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä.':
        timing = datetime.datetime.now()
        off_pc = open('processlog.txt','a')
        off_pc.write(str(timing)+' –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.\n')
        off_pc.close()
        bot.send_message(call.message.chat.id, '–í—ã–∫–ª—é—á–∞–µ—Ç—Å—è.')
        os.startfile(r'function_bot\off_pc.exe')



    elif call.data == '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä.':
        timing = datetime.datetime.now()
        restart = open('processlog.txt','a')
        restart.write(str(timing)+' –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.\n')
        restart.close()
        bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è.')
        os.startfile(r'function_bot\restart.exe')




    elif call.data == '–°–ø—è—â–∏–π —Ä–µ–∂–∏–º.':
        bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ—à—ë–ª –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º.')
        os.startfile(r'function_bot\sleep_pc.exe')




    elif call.data == '–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.':
        def check_proc_for(ret):
            s = []
            s_specail = []
            processes = psutil.process_iter()
            for process in processes:
                if process.name() != 'svchost.exe' and process.name() != 'System Idle Process' and process.name() != 'System' and process.name() != 'Registry':
                    s.append(process.name()+ ret)
                    s_specail.append(process.name())

            return s

        spis = check_proc_for('\n')
        spis = ''.join(spis)
        bot.send_message(call.message.chat.id,spis)

        spis_chet = check_proc_for('')
        spis_chet = ''.join(spis_chet)

        timing = datetime.datetime.now()
        check = open('processlog.txt','a')
        check.write(str(timing)+' –ó–∞–ø—Ä–æ—Å –≤—ã–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.\n')
        check.close()

        bot.send_message(call.message.chat.id, f'–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—Ç–µ—Ä–µ.\n–í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(spis_chet)}')






    elif call.data == '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤.':
        def start_block_file(adres):

            timing = datetime.datetime.now()
            new = open('processlog.txt', 'a')
            new.write(str(timing) + f' –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–∞: {adres.text}')
            new.close()

            file_block_site = open(r'site_block.txt', 'r+')
            file_block_site.write(adres.text)
            file_block_site.close()
            # os.system(r'controle_key.py')
            time.sleep(5)
            os.startfile('main_controle.exe')
            bot.send_message(call.message.chat.id, '–£—Å–ø–µ—à–Ω–æ.')

        name_site = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∏–∂–µ:')
        bot.register_next_step_handler(name_site, start_block_file)






    elif call.data == '–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤.':
        def start_unblock_file(adres):

            timing = datetime.datetime.now()
            new = open('processlog.txt', 'a')
            new.write(str(timing) + f' –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤: {adres.text}')
            new.close()

            file_block_site = open(r'site_unblock.txt', 'r+')
            file_block_site.write(adres.text)
            file_block_site.close()
            time.sleep(5)
            os.startfile('programm_clean_list_site.exe')
            bot.send_message(call.message.chat.id, '–£—Å–ø–µ—à–Ω–æ.')
            block = open('processlog.txt', 'a')
            block.write(str(timing) + f' –ü–æ–ø—ã—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–∞: {adres.text}')
            block.close()

        name_site = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∏–∂–µ:')
        bot.register_next_step_handler(name_site, start_unblock_file)






    elif call.data == '–°–∫—Ä–∏–Ω—à–æ—Ç.':
        process = pros()

        def screen_small_time(vremi, pri):
            timing = datetime.datetime.now()
            os.startfile('screen.exe')
            sc = open('processlog.txt', 'a')
            sc.write(str(timing) + f' –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞ {pri}\n.')
            sc.close()
            time.sleep(vremi)
            img = open('screenshot.png', 'rb')
            bot.send_photo(call.message.chat.id, img)
            img.close()
            os.remove('screenshot.png')
            bot.send_message(call.message.chat.id, '–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞.')


        if  'block_keyboard.exe' not in process and  'block_mouse.exe' not in process:
            screen_small_time(15,'–ë—ã—Å—Ç—Ä—ã–π')


        elif  'block_keyboard.exe' in process or 'block_mouse.exe' in process:
            screen_small_time(35,'–î–æ–ª–≥–∏–π')



    elif call.data == '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.':
        bot.send_message(call.message.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.')
        bot.send_message(call.message.chat.id, check_info_xar.name_pc())

    elif call.data == '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.':
        bot.send_message(call.message.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.')
        bot.send_message(call.message.chat.id, check_info_xar.name_processor())

    elif call.data == '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.':
        bot.send_message(call.message.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.')
        bot.send_message(call.message.chat.id, check_info_xar.name_os())





    elif call.data == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.':
        timing = datetime.datetime.now()
        send_photo_user = open('processlog.txt','a')
        send_photo_user.write(str(timing)+' –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ü–ö\n')
        send_photo_user.close()

        adres_gallery = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞:')

        def send_photo(adres):
            timing = datetime.datetime.now()
            try:
                send_photo_user = open('processlog.txt', 'a')
                send_photo_user.write(str(timing) + ' –§–æ—Ç–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n')
                send_photo_user.close()

                photo = open(adres.text, 'rb')
                bot.send_photo(call.message.chat.id, photo)
                photo.close()

            except:
                bot.send_message(call.message.chat.id,'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. \n*–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞.')
                send_photo_user = open('processlog.txt', 'a')
                send_photo_user.write(str(timing) + ' –û—à–∏–±–∫–∞, —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞.\n')
                send_photo_user.close()

        bot.register_next_step_handler(adres_gallery, send_photo)




    elif call.data == '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫—É—Ä—Å–æ—Ä –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.':
        timing = datetime.datetime.now()
        new = open('processlog.txt', 'a')
        new.write(str(timing) + ' –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞.')
        new.close()

        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.')
        pos = bot.send_message(call.message.chat.id, '–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 500 500')

        def move_to(how_move):
            how_move = how_move.text.split()
            try:
                pyautogui.moveTo(int(how_move[0]), int(how_move[1]))
                bot.send_message(call.message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–æ.')

                new = open('processlog.txt', 'a')
                new.write(str(timing) + f' –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–µ: {how_move}\n')
                new.close()

            except:
                bot.send_message(call.message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.\n')

                new = open('processlog.txt', 'a')
                new.write(str(timing) + f' –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –æ—à–∏–±–∫–∞:{how_move}')
                new.close()

        bot.register_next_step_handler(pos, move_to)






    elif call.data == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä.':
        timing = datetime.datetime.now()
        save_gallery = bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.')
        send_photo_user = open('processlog.txt','a')
        send_photo_user.write(str(timing)+' –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä.')
        send_photo_user.close()


        def save_gallery_photo(message):

            chat_id = call.message.chat.id
            try:
                timing = datetime.datetime.now()
                install_photo_user = open('processlog.txt', 'a')
                install_photo_user.write(str(timing) + f' –§–∞–π–ª –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ò–º—è —Ñ–∞–π–ª–∞ {message.document.file_name}\n')
                install_photo_user.close()
                file_info = bot.get_file(message.document.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                src = "C:/Users/Public/Documents/DownloadBot/" + message.document.file_name
                with open(src, 'wb') as new_file:
                    new_file.write(downloaded_file)

                bot.reply_to(message,    f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏\t\tC:/Users/Public/Documents/DownloadBot/{message.document.file_name} ")
            except:
                timing = datetime.datetime.now()
                send_photo_user = open('processlog.txt', 'a')
                send_photo_user.write(str(timing) + ' –û—à–∏–±–∫–∞, –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ.\n')
                send_photo_user.close()
                bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞.')

        bot.register_next_step_handler(save_gallery, save_gallery_photo)







    elif call.data == '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª.':
        timing = datetime.datetime.now()
        def start_file_message(enter_message):
            timing = datetime.datetime.now()
            start_file = open('processlog.txt', 'a')
            start_file.write(str(timing) + f' –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞: {enter_message.text}')
            start_file.close()

            try:
                bot.send_message(call.message.chat.id, '–§–∞–π–ª –∑–∞–ø—É—â–µ–Ω.\n–ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
                os.system(enter_message.text)
                timing = datetime.datetime.now()
                start_file = open('processlog.txt', 'a')
                start_file.write(str(timing) + f' –§–∞–π–ª –±—ã–ª –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ{enter_message.text}.\n')
                start_file.close()
            except:
                timing = datetime.datetime.now()
                start_file = open('processlog.txt', 'a')
                start_file.write(str(timing) + f' –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞{enter_message.text}.\n')
                start_file.close()
                bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å.')

        adres = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞:')
        bot.register_next_step_handler(adres, start_file_message)




    elif call.data == '–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç.':
        def distance_write(prom):
            bot.send_message(call.message.chat.id, '–ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ. –£ –≤–∞—Å –µ—Å—Ç—å 10 —Å–µ–∫—É–Ω–¥!')
            time.sleep(10)
            prom = list(prom.text)
            for push in prom:
                time.sleep(0.8)
                print(push)
                keyboard.press(push)

        te = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å.')
        bot.register_next_step_handler(te, distance_write)




    elif call.data == '–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø—å—Ç–µ—Ä–∞.':
        process_graf = pros()
        def  long_or_small_push(vremi,pri):
            timing = datetime.datetime.now()
            start_file = open('processlog.txt', 'a')
            start_file.write(str(timing) + f' –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {pri}\n.')
            start_file.close()

            os.startfile('create_grfic.exe')
            bot.send_message(call.message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –ø–æ–¥—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏...')
            time.sleep(vremi)
            graf = open('MonitorCheck.png', 'rb')
            bot.send_photo(call.message.chat.id, graf)
            bot.send_message(call.message.chat.id, '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—é –Ω–µ–¥–µ–ª—é.')
            graf.close()
            os.remove('MonitorCheck.png')
        if  'block_keyboard.exe' not in process_graf and  'block_mouse.exe' not in process_graf:

            long_or_small_push(20,'–ë—ã—Å—Ç—Ä—ã–π')

        elif  'block_keyboard.exe' in process_graf or  'block_mouse.exe' in process_graf:

            long_or_small_push(35,'–î–æ–ª–≥–∏–π')





    elif call.data == '–°–∫—Ä–∏–Ω—à–æ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º.':
        timing = datetime.datetime.now()
        def write_text_on_screen(text_on_screen):

            text_on_screen = text_on_screen.text.split()

            timing = datetime.datetime.now()

            start_file = open('processlog.txt', 'a')
            start_file.write(str(timing) + f' –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º: {text_on_screen[0]}\n')
            start_file.close()

            bot.send_message(call.message.chat.id, '–°–∫—Ä–∏–Ω—à–æ—Ç –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫.')
            time.sleep(5)

            os.startfile('screen.exe')
            bot.send_message(call.message.chat.id, '–°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...')
            time.sleep(10)
            image = Image.open("screenshot.png")
            font = ImageFont.truetype("arial.ttf",int(text_on_screen[-1]))
            drawer = ImageDraw.Draw(image)

            try:
                drawer.text((int(text_on_screen[1]), int(text_on_screen[2])), text_on_screen[0], font=font, fill='white')
                image.save('screenshottext.png')
                time.sleep(15)
                file_text = open('screenshottext.png', 'rb+')
                bot.send_photo(call.message.chat.id, file_text)
                time.sleep(15)
                file_text.close()
                time.sleep(3)
                os.remove('screenshottext.png')
                os.remove('screenshot.png')
                timing = datetime.datetime.now()
                start_file = open('processlog.txt', 'a')
                start_file.write(str(timing) + f' –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å —Ç–µ–∫—Å—Ç–æ–º:{text_on_screen[0]}\n')
                start_file.close()
            except:
                bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Ü–µ–ª–æ—Å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.')
                timing = datetime.datetime.now()
                start_file = open('processlog.txt', 'a')
                start_file.write(str(timing) + ' –û—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º.\n')
                start_file.close()

        name_text = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–¢–µ–∫—Å—Ç –ü–æ–∑–∏—Ü–∏—è –ø–æ x –∏ y —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞)\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∏–º–µ—Ä 50 50 25: ')
        bot.register_next_step_handler(name_text, write_text_on_screen)




    elif call.data == '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞.':
        timing = datetime.datetime.now()
        bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...\n–ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.')
        time.sleep(2)
        os.system(f"taskkill /f /im main.exe")
        os.system(f"taskkill /f /im update.exe")
        os.startfile('update.exe')

        start_file = open('processlog.txt', 'a')
        start_file.write(str(timing) + ' –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.\n')
        start_file.close()




    elif call.data == '–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –±–æ—Ç–∞.':
        timing = datetime.datetime.now()
        bot.send_message(call.message.chat.id, '–û—á–∏—Å—Ç–∫–∞...')
        try:
            os.remove('processlog.txt')
            time.sleep(5)
            new = open('processlog.txt','a')
            new.write(str(timing)+' –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –±–æ—Ç–∞: –£—Å–ø–µ—à–Ω–æ\n')
            new.close()
            bot.send_message(call.message.chat.id,'–£—Å–ø–µ—à–Ω–æ.')
        except:
            bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞, –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞')
            new = open('processlog.txt', 'a')
            new.write(str(timing) + ' –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –±–æ—Ç–∞: –û—à–∏–±–∫–∞\n')
            new.close()
            bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')




    elif call.data == '–ê–≤—Ç–æ—Å–∫—Ä–∏–Ω.':

        for_read = open('autoscreenstatus.txt','r')
        on_off_read = str(for_read.read())

        if on_off_read=='on':
            timing = datetime.datetime.now()

            for_read.close()

            for_write = open('autoscreenstatus.txt','w')
            on_off_write = for_write.write('off')
            for_write.close()

            for_write = open('autoscreenstatus.txt', 'r')
            y = str(for_write.read())
            bot.send_message(call.message.chat.id,f'–ê–≤—Ç–æ-—Å–∫—Ä–∏–Ω: {y}')
            for_write.close()

            start_file = open('processlog.txt', 'a')
            start_file.write(str(timing) + ' –§–ª–∞–≥ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ-—Å–∫—Ä–∏–Ω –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: off.\n')
            start_file.close()


            time.sleep(2)
            os.system("taskkill /f /im  main.exe")





        elif on_off_read=='off':
            timing = datetime.datetime.now()

            for_read.close()

            for_write = open('autoscreenstatus.txt','w')
            on_off_write = for_write.write('on')
            for_write.close()

            for_write = open('autoscreenstatus.txt', 'r')
            x = str(for_write.read())
            bot.send_message(call.message.chat.id, f'–ê–≤—Ç–æ-—Å–∫—Ä–∏–Ω: {x}')
            for_write.close()

            check_status_on_off(pros())

            start_file = open('processlog.txt', 'a')
            start_file.write(str(timing) + ' –§–ª–∞–≥ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ-—Å–∫—Ä–∏–Ω –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: on.\n')
            start_file.close()

            time.sleep(2)


            os.system(f"taskkill /f /im main.exe")




    elif call.data == '–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ —É –ê–≤—Ç–æ-–°–∫—Ä–∏–Ω.':
        def write_time_auto(time_auto):

            if  int(time_auto.text) < 5:
                timing = datetime.datetime.now()
                bot.send_message(call.message.chat.id,'–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è 5!')


                start_file = open('processlog.txt', 'a')
                start_file.write(str(timing) + f' –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —É –∞–≤—Ç–æ-—Å–∫—Ä–∏–Ω –Ω–∞ {time_auto.text}.\n')
                start_file.close()

            else:
                timing = datetime.datetime.now()
                file = open('timeauto.txt','w')
                file_write = file.write(str(time_auto.text))
                file.close()
                bot.send_message(call.message.chat.id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.')


                start_file = open('processlog.txt', 'a')
                start_file.write(str(timing) + f' –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ —É –∞–≤—Ç–æ-—Å–∫—Ä–∏–Ω –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {time_auto.text}.\n')
                start_file.close()



        now_how_time = open('timeauto.txt','r')
        how_now = now_how_time.read()

        choose_time = bot.send_message(call.message.chat.id,f'–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤ —Å–µ–∫:\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —Ä–∞–≤–µ–Ω 60 —Å–µ–∫—É–Ω–¥–∞–º.\n–°–µ–π—á–∞—Å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —Ä–∞–≤–µ–Ω: {how_now} —Å–µ–∫.')
        now_how_time.close()
        bot.register_next_step_handler(choose_time, write_time_auto)




    elif call.data == '–ü–æ–∏—Å–∫ –≤ Wikipedia.':
        def found(t):
            try:
                timing = datetime.datetime.now()
                t = t.text
                wikipedia.set_lang("ru")
                search = wikipedia.summary(t)
                bot.send_message(call.message.chat.id,search)
                start_file = open('processlog.txt', 'a')
                start_file.write(str(timing) + f' –ü–æ–∏—Å–∫ –≤ wiki —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ. –ß—Ç–æ –∏—Å–∫–∞–ª–∏: {t}.\n')
                start_file.close()
            except:
                timing = datetime.datetime.now()
                start_file = open('processlog.txt', 'a')
                start_file.write(str(timing) + f' –ü–æ–∏—Å–∫ –≤ wiki —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –û—à–∏–±–∫–∞. –ß—Ç–æ –∏—Å–∫–∞–ª–∏: {t}.\n')
                start_file.close()
                bot.send_message(call.message.chat.id,'–û—à–∏–±–∫–∞, —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç—É.')


        t = bot.send_message(call.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Wiki.')
        bot.register_next_step_handler(t,found)













# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(content_types=['text'])
# –§—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—è
def bot_message(message):
    if message.chat.type == 'private':


        if message.text == '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞.':
            timing = datetime.datetime.now()
            start_file = open('processlog.txt', 'a')
            start_file.write(str(timing) + ' –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞.\n')
            start_file.close()
            key_klav = types.InlineKeyboardMarkup()
            but_on = types.InlineKeyboardButton(text='–í–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.', callback_data='–í–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.')
            but_off = types.InlineKeyboardButton(text='–í—ã–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.', callback_data='–í—ã–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.')
            but_autowrite = types.InlineKeyboardButton(text='–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç.', callback_data='–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç.')
            key_klav.add(but_on)
            key_klav.add(but_off)
            key_klav.add(but_autowrite)
            bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π:', reply_markup=key_klav)




        elif message.text == '–ú—ã—à—å.':
            timing = datetime.datetime.now()
            start_file = open('processlog.txt', 'a')
            start_file.write(str(timing) + ' –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –ú—ã—à—å.\n')
            start_file.close()
            key_mouse = types.InlineKeyboardMarkup()
            but_on_mouse = types.InlineKeyboardButton(text='–í–∫–ª—é—á–∏—Ç—å –º—ã—à—å.', callback_data='–í–∫–ª—é—á–∏—Ç—å –º—ã—à—å.')
            but_off_mouse = types.InlineKeyboardButton(text='–í—ã–∫–ª—é—á–∏—Ç—å –º—ã—à—å.', callback_data='–í—ã–∫–ª—é—á–∏—Ç—å –º—ã—à—å.')
            but_move_kyrsor = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫—É—Ä—Å–æ—Ä –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.',
                                                         callback_data='–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫—É—Ä—Å–æ—Ä –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.')
            key_mouse.add(but_off_mouse)
            key_mouse.add(but_on_mouse)
            key_mouse.add(but_move_kyrsor)
            bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –º—ã—à—å—é:', reply_markup=key_mouse)




        elif message.text == '–≠–∫—Ä–∞–Ω.':
            timing = datetime.datetime.now()
            start_file = open('processlog.txt', 'a')
            start_file.write(str(timing) + ' –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –≠–∫—Ä–∞–Ω.\n')
            start_file.close()

            #status = open('autoscreenstatus.txt','r+')
            #now = str(status.read())

            key_screen = types.InlineKeyboardMarkup()
            but1 = types.InlineKeyboardButton(text='–°–∫—Ä–∏–Ω—à–æ—Ç.', callback_data='–°–∫—Ä–∏–Ω—à–æ—Ç.')
            but2 = types.InlineKeyboardButton(text='–°–∫—Ä–∏–Ω—à–æ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º.', callback_data='–°–∫—Ä–∏–Ω—à–æ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º.')
            #but3 = types.InlineKeyboardButton(text = f'–ê–≤—Ç–æ-—Å–∫—Ä–∏–Ω: {now}',callback_data='–ê–≤—Ç–æ—Å–∫—Ä–∏–Ω.')
            #status.close()
            key_screen.add(but1)
            key_screen.add(but2)
            #key_screen.add(but3)
            bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —ç–∫—Ä–∞–Ω–æ–º: ', reply_markup=key_screen)




        elif message.text == '–ö–æ–º–ø—å—é—Ç–µ—Ä.':
            timing = datetime.datetime.now()
            start_file = open('processlog.txt', 'a')
            start_file.write(str(timing) + ' –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –ö–æ–º–ø—å—é—Ç–µ—Ä.\n')
            start_file.close()
            key_pc = types.InlineKeyboardMarkup()
            but_pc_off = types.InlineKeyboardButton(text='–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä.', callback_data='–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä.')
            but_pc_restart = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä.',
                                                        callback_data='–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä.')
            but_pc_sleep = types.InlineKeyboardButton(text='–°–ø—è—â–∏–π —Ä–µ–∂–∏–º.', callback_data='–°–ø—è—â–∏–π —Ä–µ–∂–∏–º.')
            but_pc_process = types.InlineKeyboardButton(text='–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.', callback_data='–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.')
            # but_pc_site_block = types.InlineKeyboardButton(text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤.',callback_data='–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤.')
            # but_pc_site_unblock = types.InlineKeyboardButton(text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤.',callback_data='–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤.')
            but_pc_name = types.InlineKeyboardButton(text='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.', callback_data='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.')
            but_pc_name_processor = types.InlineKeyboardButton(text='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.',
                                                               callback_data='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.')
            but_pc_name_os = types.InlineKeyboardButton(text='–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.',
                                                        callback_data='–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.')
            # button_start_file = types.InlineKeyboardButton(text = '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª.',callback_data='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª.')
            button_crash_process = types.InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.',
                                                              callback_data='–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.')
            button_active_pc = types.InlineKeyboardButton(text='–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø—å—Ç–µ—Ä–∞.',
                                                          callback_data='–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø—å—Ç–µ—Ä–∞.')
            # button_go_photo = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.',callback_data='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.')
            key_pc.add(but_pc_off, but_pc_restart)
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ—á–∫—É
            key_pc.add(but_pc_sleep, but_pc_process)
            key_pc.add(but_pc_name, but_pc_name_processor)
            key_pc.add(but_pc_name_os)
            key_pc.add(button_crash_process)
            key_pc.add(button_active_pc)
            bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–ø—å—Ç–µ—Ä–æ–º: ', reply_markup=key_pc)





        elif message.text == '–§–∞–π–ª—ã.':
            timing = datetime.datetime.now()
            start_file = open('processlog.txt', 'a')
            start_file.write(str(timing) + ' –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –§–∞–π–ª—ã.\n')
            start_file.close()

            key_files = types.InlineKeyboardMarkup()
            button_save_file_on_pc = types.InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä.', callback_data='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä.')
            button_files = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.',callback_data='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.')
            button_start_file = types.InlineKeyboardButton(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª.', callback_data='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª.')
            key_files.add(button_save_file_on_pc)
            key_files.add(button_files)
            key_files.add(button_start_file)
            bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–∞–π–ª–∞–º–∏:', reply_markup=key_files)




        elif message.text == '–°–∞–π—Ç—ã.':
            timing = datetime.datetime.now()
            start_file = open('processlog.txt', 'a')
            start_file.write(str(timing) + ' –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –°–∞–π—Ç—ã.\n')
            start_file.close()

            key_site = types.InlineKeyboardMarkup()
            but_pc_site_block = types.InlineKeyboardButton(text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤.', callback_data='–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤.')
            but_pc_site_unblock = types.InlineKeyboardButton(text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤.', callback_data='–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤.')
            key_site.add(but_pc_site_block)
            key_site.add(but_pc_site_unblock)
            bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–∞–π—Ç–∞–º–∏.', reply_markup=key_site)



# –ù–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞.
        elif message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.':
            timing = datetime.datetime.now()
            rule = open('processlog.txt','a')
            rule.write(str(timing)+' –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.\n')
            rule.close()

            rule_bot = types.InlineKeyboardMarkup()

            but_left = types.InlineKeyboardButton(text = '–õ–µ–≤–æ.',callback_data='–õ–µ–≤–æ.')
            but_right = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–æ.', callback_data='–ü—Ä–∞–≤–æ.')
            but_forward = types.InlineKeyboardButton(text='–í–≤–µ—Ä—Ö.', callback_data='–í–≤–µ—Ä—Ö.')
            but_down = types.InlineKeyboardButton(text='–í–Ω–∏–∑.', callback_data='–í–Ω–∏–∑.')

            rule_bot.add(but_forward)
            rule_bot.add(but_down)
            rule_bot.add(but_left)
            rule_bot.add(but_right)
            bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:',reply_markup=rule_bot)




        elif message.text == '–î—Ä—É–≥–æ–µ.':
            timing = datetime.datetime.now()

            start_file = open('processlog.txt', 'a')
            start_file.write(str(timing) + ' –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –î—Ä—É–≥–æ–µ.\n')
            start_file.close()

            key_dif = types.InlineKeyboardMarkup()
            search_wiki = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –≤ Wikipedia.', callback_data='–ü–æ–∏—Å–∫ –≤ Wikipedia.')
            key_dif.add(search_wiki)
            bot.send_message(message.chat.id, '–î—Ä—É–≥–æ–µ:', reply_markup=key_dif)






        elif message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.':
            timing = datetime.datetime.now()

            start_file = open('processlog.txt', 'a')
            start_file.write(str(timing) + ' –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –ë–æ—Ç.\n')
            start_file.close()


            status = open('autoscreenstatus.txt','r+')
            now = str(status.read())

            key_bot = types.InlineKeyboardMarkup()
            but_bot_restart = types.InlineKeyboardButton(text = '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞.',callback_data='–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞.')
            but_bot_clen = types.InlineKeyboardButton(text='–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –±–æ—Ç–∞.',callback_data='–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –±–æ—Ç–∞.')
            #but_bit_installer = types.InlineKeyboardButton(text ='–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫.',callback_data='–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫.')
            but_time_auto = types.InlineKeyboardButton(text = '–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ —É –ê–≤—Ç–æ-–°–∫—Ä–∏–Ω.',callback_data='–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ —É –ê–≤—Ç–æ-–°–∫—Ä–∏–Ω.')
            but3 = types.InlineKeyboardButton(text = f'–ê–≤—Ç–æ-—Å–∫—Ä–∏–Ω: {now}',callback_data='–ê–≤—Ç–æ—Å–∫—Ä–∏–Ω.')

            status.close()

            key_bot.add(but_bot_restart)
            key_bot.add(but_bot_clen)
            key_bot.add(but3)
            #key_bot.add(but_bit_installer)
            key_bot.add(but_time_auto)

            bot.send_message(message.chat.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:', reply_markup=key_bot)



#      spelling = Speller(lang='ru')
 #       elif  spelling(message.text) in big_list:
  #          pass





while True:
    try:
        bot.polling(non_stop=True)
    except Exception as _ex:
        print(_ex)
        time.sleep(15)